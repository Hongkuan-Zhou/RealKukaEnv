package Controller;

import com.kuka.roboticsAPI.RoboticsAPIContext;
import com.kuka.roboticsAPI.applicationModel.RoboticsAPIApplication;
import com.kuka.roboticsAPI.deviceModel.LBR;
import com.kuka.roboticsAPI.geometricModel.Tool;

import robot.ExecutionController;
import robot.SunriseConnector;
import utility.SingleInstanceChecker;


public class Controller {
    
	private SmartServoLINMotions app = null;
	public Controller() {
		//RoboticsAPIContext.useGracefulInitialization(true);

		// check if another robot application is already running
		//new SingleInstanceChecker().start();

		// initialization
		app = new SmartServoLINMotions(RoboticsAPIContext.createFromResource(SmartServoLINMotions.class, "RoboticsAPI.config.xml"));
		
		app.initialize();
		app.run();
	}
	
	
	public double [] getCurrentJoints() {
		return app.getCurrentJointsPosition();
	}
	
	public double [] getCurrentFrame() {
		return app.getCurrentPosition();
	}
	
	
	public double [] getCurrentFrameVelocity() {
		return app.getCurrentVelocity();
	}
	
	public void setAction(double [] action) {
		app.setTarget(action);
	}
	public void stepJoints(double [] joints) {
		app.stepJoints(joints);
	}
	public void stepFrame(double [] Frame) {
		app.stepFrame(Frame);
	}
	public void step() {
		app.step();
	}
	
	
	
	public String path() {
		return this.getClass().getProtectionDomain().getCodeSource().getLocation().getPath();
	}
    
	public static void main (String [] args) {
		Controller c = new Controller();
		double [] frame = c.getCurrentFrame();
		frame[0]+= 100;
		frame[1]+= 100;
		frame[2]+= 100;
		c.stepFrame(frame);
	}


}
